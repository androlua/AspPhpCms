【parentid】ASP
【title】快速掌握正则表达式技巧
【webtitle】快速掌握正则表达式技巧
【webkeywords】快速掌握正则表达式技巧
【webdescription】快速掌握正则表达式技巧 QQ313801120
【sortrank】1
【author】sharembweb
【adddatetime】2016-05-16 15:39:18
【filename】/asp/Fast-master-regular-expression-skills.html
【flags】|
【relatedtags】ASP
【bodycontent】
{$displayEditor $}
[&全部换行&][&html转码&]【《】div class="article_lable">快速掌握正则表达式技巧【《】/div>

【《】div class="article_lable">正则表达式概念【《】/div>
正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。

【《】div class="article_lable">什么是正则 【《】/div>
正则表达式是一种用来描述一定数量文本的模式，用来匹配相同规范样式的文本。在JavaScript中用RegExp对象表示正则表达式( 即Regular Eexpression)，它是对字符串执行模式匹配的强大工具。

【《】div class="article_lable">一、校验数字的表达式 【《】/div>
数字：^[0-9]*$
n位的数字：^\d{n}$
至少n位的数字：^\d{n,}$
m-n位的数字：^\d{m,n}$
零和非零开头的数字：^(0|[1-9][0-9]*)$
非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$
带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$
正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$
有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
非零的负整数：^\-[1-9][]0-9″*$ 或 ^-[1-9]\d*$
非负整数：^\d+$ 或 ^[1-9]\d*|0$
非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$

【《】div class="article_lable">二、校验字符的表达式 【《】/div>
汉字：^[\u4e00-\u9fa5]{0,}$
英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
长度为3-20的所有字符：^.{3,20}$
由26个英文字母组成的字符串：^[A-Za-z]+$
由26个大写英文字母组成的字符串：^[A-Z]+$
由26个小写英文字母组成的字符串：^[a-z]+$
由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$
中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$
中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
可以输入含有^%&',;=?$\”等字符：[^%&',;=?$\x22]+
禁止输入含有~的字符：[^~\x22]+

【《】div class="article_lable">三、特殊需求表达式 【《】/div>
Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?
InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$
手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$
电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$
国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}
身份证号(15位、18位数字)：^\d{15}|\d{18}$
短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$
强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
日期格式：^\d{4}-\d{1,2}-\d{1,2}
一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$
钱的输入格式：

1.有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00″, 和没有 “分” 的 “10000″ 和 “10,000″：^[1-9][0-9]*$ 
2.这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 
3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 
4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 
5.必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10″ 和 “10.2″ 是通过的：^[0-9]+(.[0-9]{2})?$ 
6.这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样：^[0-9]+(.[0-9]{1,2})?$ 
7.这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 
8.1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ 
9.备注：这就是最终结果了，别忘了”+”可以用”*”替代。如果你觉得空字符串也可以接受的话(奇怪，为什么?)最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里


xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
中文字符的正则表达式：[\u4e00-\u9fa5]
双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
空白行的正则表达式：\n\s*\r (可以用来删除空白行)
HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? /> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)
首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)
中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)
IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)
IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) (由@飞龙三少 提供，感谢共享)

以上就是货真价实，最全面的正则表达式，希望对大家的学习有所帮助，快点收藏。


RegExp 对象的属性
\ 将下一个字符标记为特殊字符或字面值。例如"n"与字符"n"匹配。"\n"与换行符匹配。序列"\\"与"\"匹配对面，"\("与"("匹配。
^ 匹配输入的开始位置。
$ 匹配输入的结尾。
* 匹配前一个字符零次或几次。例如，"zo*"可以匹配"z"、"zoo"。
+ 匹配前一个字符一次或多次。例如，"zo+"可以匹配"zoo",但不匹配"z"。
? 匹配前一个字符零次或一次。例如，"a?ve?"可以匹配"never"中的"ve"。
. 匹配换行符以外的任何字符。
(pattern) 与模式匹配并记住匹配。匹配的子字符串可以从作为结果的 Matches 集合中使用 Item [0]...[n]取得。如果要匹配括号字符(和 )，可使用"\(" 或 "\)"。
x|y 匹配 x 或 y。例如 "z|food" 可匹配 "z" 或 "food"。"(z|f)ood" 匹配 "zoo" 或 "food"。
{n} n 为非负的整数。匹配恰好n次。例如，"o{2}" 不能与 "Bob 中的 "o" 匹配，但是可以与"foooood"中的前两个o匹配。
{n,} n 为非负的整数。匹配至少n次。例如，"o{2,}"不匹配"Bob"中的"o"，但是匹配"foooood"中所有的o。"o{1,}"等价于"o+"。"o{0,}"等价于"o*"。
{n,m} m 和 n 为非负的整数。匹配至少 n 次，至多 m 次。例如，"o{1,3}" 匹配 "fooooood"中前三个o。"o{0,1}"等价于"o?"。
[xyz] 一个字符集。与括号中字符的其中之一匹配。例如，"[abc]" 匹配"plain"中的"a"。
[^xyz] 一个否定的字符集。匹配不在此括号中的任何字符。例如，"[^abc]" 可以匹配"plain"中的"p".
[a-z] 表示某个范围内的字符。与指定区间内的任何字符匹配。例如，"[a-z]"匹配"a"与"z"之间的任何一个小写字母字符。
[^m-z] 否定的字符区间。与不在指定区间内的字符匹配。例如，"[m-z]"与不在"m"到"z"之间的任何字符匹配。
\b 与单词的边界匹配，即单词与空格之间的位置。例如，"er\b" 与"never"中的"er"匹配，但是不匹配"verb"中的"er"。
\B 与非单词边界匹配。"ea*r\B"与"never early"中的"ear"匹配。
\d 与一个数字字符匹配。等价于[0-9]。
\D 与非数字的字符匹配。等价于[^0-9]。
\f 与分页符匹配。
\n 与换行符字符匹配。
\r 与回车字符匹配。
\s 与任何白字符匹配，包括空格、制表符、分页符等。等价于"[ \f\n\r\t\v]"。
\S 与任何非空白的字符匹配。等价于"[^ \f\n\r\t\v]"。
\t 与制表符匹配。
\v 与垂直制表符匹配。
\w 与任何单词字符匹配，包括下划线。等价于"[A-Za-z0-9_]"。
\W 与任何非单词字符匹配。等价于"[^A-Za-z0-9_]"。
\num 匹配 num个，其中 num 为一个正整数。引用回到记住的匹配。例如，"(.)\1"匹配两个连续的相同的字符。
\n 匹配 n，其中n 是一个八进制换码值。八进制换码值必须是 1, 2 或 3 个数字长。例如，"\11" 和 "\011" 都与一个制表符匹配。"\0011"等价于"\001" 与 "1"。八进制换码值不得超过 256。否则，只有前两个字符被视为表达式的一部分。允许在正则表达式中使用ASCII码。
\xn 匹配n，其中n是一个十六进制的换码值。十六进制换码值必须恰好为两个数字长。例如，"\x41"匹配"A"。"\x041"等价于"\x04" 和 "1"。允许在正则表达式中使用 ASCII 码。
[&全部换行end&][&html转码end&]

<strong><a href="http://sharembweb.com/ASP/" target="_blank" class="ablue">ASP</a></strong>代码部分：
<pre class="brush: vb;">
[&html转码&]
<%

function preg_test(msgStr,patternStr,c)
	dim s
	s=regExpGetStr(patternStr, c, "")
	call echo(patternStr,c)
	call echo(msgStr,s)
	call br()
end function

call rw("<font color=red>一、校验数字的表达式</font><p>")
call preg_test("数字(正确)","^[0-9]*$","023123")
call preg_test("数字(错误)","^[0-9]*$","A023123")

call preg_test("n位的数字(正确)","^\d{3}$","123")
call preg_test("n位的数字(错误)","^\d{3}$","23")

call preg_test("至少n位的数字(正确)","^\d{2,}$","1230123")
call preg_test("至少n位的数字(错误)","^\d{2,}$","2")

call preg_test("m-n位的数字(正确)","^\d{2,5}$","12345")
call preg_test("m-n位的数字(错误)","^\d{2,5}$","123450")

call preg_test("零和非零开头的数字(正确)","^(0|[1-9][0-9]*)$","0")
call preg_test("零和非零开头的数字(错误)","^(0|[1-9][0-9]*)$","0123")

call preg_test("非零开头的最多带两位小数的数字(正确)","^([1-9][0-9]*)+(\.[0-9]{1,2})?$","1.00")
call preg_test("非零开头的最多带两位小数的数字(错误)","^([1-9][0-9]*)+(\.[0-9]{1,2})?$","1.000")

call preg_test("正数、负数、和小数(正确)","^(\-|\+)?\d+(\.\d+)?$","+0.2222222223652")
call preg_test("正数、负数、和小数(错误)","^(\-|\+)?\d+(\.\d+)?$","0.")

call preg_test("有两位小数的正实数(正确)","^[0-9]+(\.[0-9]{2})?$","1.00")
call preg_test("有两位小数的正实数(错误)","^[0-9]+(\.[0-9]{2})?$","0.000")

call preg_test("有1~3位小数的正实数(正确)","^[0-9]+(\.[0-9]{1,3})?$","000.100")
call preg_test("有1~3位小数的正实数(错误)","^[0-9]+(\.[0-9]{1,3})?$","1.0000")

call preg_test("非零的正整数(正确)","^\+?[1-9][0-9]*$","+10023123")
call preg_test("非零的正整数(错误)","^\+?[1-9][0-9]*$","000023123")

call preg_test("非零的负整数(正确)","^-[1-9]\d*$","-123123")
call preg_test("非零的负整数(错误)","^-[1-9]\d*$","123123")

call preg_test("非负整数(正确)","^[1-9]\d*|0$","0")
call preg_test("非负整数(错误)","^[1-9]\d*|0$","-123")

call preg_test("非正整数(正确)","^-[1-9]\d*|0$","-23123")
call preg_test("非正整数(错误)","^-[1-9]\d*|0$","0")

call preg_test("非负浮点数(正确)","^\d+(\.\d+)?$","012.333456789")
call preg_test("非负浮点数(错误)","^\d+(\.\d+)?$","A023123")

call preg_test("非正浮点数(正确)","^((-\d+(\.\d+)?)|(0+(\.0+)?))$","-12.333456789")
call preg_test("非正浮点数(错误)","^((-\d+(\.\d+)?)|(0+(\.0+)?))$","A023123")

call preg_test("正浮点数(正确)","^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$","23.123")
call preg_test("正浮点数(错误)","^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$","A023123")

call preg_test("负浮点数(正确)","^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)","-1231.7622")
call preg_test("负浮点数(错误)","^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)","A023123")

call preg_test("浮点数(正确)","^(-?\d+)(\.\d+)?$","-3.111")
call preg_test("浮点数(错误)","^(-?\d+)(\.\d+)?$","A023123")

call rw("<font color=red>二、校验字符的表达式</font><p>")

call preg_test("汉字(正确)","^[\u4e00-\u9fa5]{0,}$","汉字")
call preg_test("汉字(错误)","^[\u4e00-\u9fa5]{0,}$","A023123")

call preg_test("英文和数字(正确)","^[A-Za-z0-9]+$","023123")
call preg_test("英文和数字(错误)","^[A-Za-z0-9]+$","A023123-")

call preg_test("长度为3-20的所有字符(正确)","^.{3,20}$","abcdefg")
call preg_test("长度为3-20的所有字符(错误)","^.{3,20}$","012345678910111213151515abcdefg")

call preg_test("由26个英文字母组成的字符串(正确)","^[A-Za-z]+$","abcdefgAS")
call preg_test("由26个英文字母组成的字符串(错误)","^[A-Za-z]+$","A023123")

call preg_test("由26个大写英文字母组成的字符串(正确)","^[A-Z]+$","ABCEF")
call preg_test("由26个大写英文字母组成的字符串(错误)","^[A-Z]+$","A023123")

call preg_test("由26个小写英文字母组成的字符串(正确)","^[a-z]+$","abcedf")
call preg_test("由26个小写英文字母组成的字符串(错误)","^[a-z]+$","A023123")

call preg_test("由数字、26个英文字母或者下划线组成的字符串(正确)","^\w+$","023123aA")
call preg_test("由数字、26个英文字母或者下划线组成的字符串(错误)","^\w+$","A02"& vbcrlf &"3123")

call preg_test("中文、英文、数字包括下划线(正确)","^[\u4E00-\u9FA5A-Za-z0-9_]+$","0aA_中23123")
call preg_test("中文、英文、数字包括下划线(错误)","^[\u4E00-\u9FA5A-Za-z0-9_]+$","A023"& vbcrlf &"123")

call preg_test("禁止输入含有~的字符(正确)","[^~\x22]+","-中国")
call preg_test("禁止输入含有~的字符(错误)","[^~\x22]+","A02中~3123")

call rw("<font color=red>三、特殊需求表达式</font><p>")

call preg_test("Email地址(正确)","^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$","023123@qq.com")
call preg_test("Email地址(错误)","^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$","asdf.com.com.cn@qq.com.cn.net@")

call preg_test("域名(正确)","[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?","http://www.baidu.com/aa/a/a/")
call preg_test("域名(错误)","[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?","baidj")

call preg_test("InternetURL(正确)","[a-zA-z]+://[^\s]*","http://www.baidu.com/aa/index.php")
call preg_test("InternetURL(错误)","[a-zA-z]+://[^\s]*","A023123")

call preg_test("手机号码(正确)","^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$","18165223022")
call preg_test("手机号码(错误)","^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$","A023123")

'call preg_test("电话号码(正确)","^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$","021-1234567")
'call preg_test("电话号码(错误)","^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$","A023123")

call preg_test("国内电话号码(正确)","\d{3}-\d{8}|\d{4}-\d{7}","0211-87888822")
call preg_test("国内电话号码(错误)","\d{3}-\d{8}|\d{4}-\d{7}","A023123")

call preg_test("身份证号(正确)","^\d{15}|\d{18}$","352532262201235624")
call preg_test("身份证号(错误)","^\d{15}|\d{18}$","b35253226220123562463652332233232a")

call preg_test("帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)(正确)","^[a-zA-Z][a-zA-Z0-9_]{4,15}$","aA12_")
call preg_test("帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)(错误)","^[a-zA-Z][a-zA-Z0-9_]{4,15}$","A023123中")

call preg_test("密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)(正确)","^[a-zA-Z]\w{5,17}$","abcdfa")
call preg_test("密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)(错误)","^[a-zA-Z]\w{5,17}$","A3")

response.End()
%>[&html转码end&]
</pre>
<br>
{$TitleInSearchEngineList divclass='article_lable'  title='快速掌握正则表达式技巧'$}

【/bodycontent】


 

